# Update Time: 2023-08-10 09:30
version: "3.4"

services:
  # Gogs
  # gogs:
  #   image: gogs/gogs:latest
  #   networks: [network_cluster]
  #   restart: on-failure
  #   environment:
  #     PUID: 1000
  #     PGID: 1000
  #     TZ: ${TZ}    
  #   volumes:
  #     - nfs_gogs_data:/data
  #   deploy:
  #     labels:
  #       - "traefik.enable=true"
  #       - "traefik.http.routers.gogs.rule=Host(`gogs.${DOMAIN_SWARM}`)"
  #       - "traefik.http.routers.gogs.entrypoints=websecure"
  #       - "traefik.http.routers.gogs.service=gogs"
  #       - "traefik.http.routers.gogs.middlewares=noauth-chain@file"
  #       - "traefik.http.services.gogs.loadbalancer.server.port=3000"
  #       - "traefik.tcp.routers.gogs_ssh.rule=HostSNI(`*`)"
  #       - "traefik.tcp.routers.gogs_ssh.entrypoints=ssh"
  #       - "traefik.tcp.routers.gogs_ssh.service=gogs_ssh"
  #       - "traefik.tcp.services.gogs_ssh.loadbalancer.server.port=22"
  #     mode: replicated
  #     replicas: 1
  #     placement:
  #       constraints:
  #         - node.labels.type == vm
  #         - node.labels.development == true

  # Gitea
  gitea:
    image: gitea/gitea:latest
    networks: [network_cluster]
    restart: on-failure
    environment:
      PUID: 1000
      PGID: 1000
      TZ: ${TZ} 
    volumes:
      - nfs_gitea:/data
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.gitea.rule=Host(`git.${DOMAIN_SWARM}`)"
        - "traefik.http.routers.gitea.entrypoints=websecure"
        - "traefik.http.routers.gitea.service=gitea"
        - "traefik.http.routers.gitea.middlewares=noauth-chain@file"
        - "traefik.http.services.gitea.loadbalancer.server.port=3000"
        - "traefik.tcp.routers.gitea_ssh.rule=HostSNI(`*`)"
        - "traefik.tcp.routers.gitea_ssh.entrypoints=ssh"
        - "traefik.tcp.routers.gitea_ssh.service=gitea_ssh"
        - "traefik.tcp.services.gitea_ssh.loadbalancer.server.port=22"
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.type == vm
          - node.labels.development == true

  code-server:
    image: lscr.io/linuxserver/code-server:latest
    networks: [network_cluster]
    restart: on-failure
    environment:
      PUID: 1000
      PGID: 1000
      PASSWORD: ${CODESERVER_PASSWORD}
      SUDO_PASSWORD: ${CODESERVER_SUDO_PASSWORD}
      TZ: ${TZ} 
    volumes:
      - nfs_code-server_data:/config
    #   - nfs_code-server_attach_base:/swarm/base
    #   - nfs_code-server_attach_public:/swarm/public
      - nfs_code-server_attach_swarm:/swarm
    #  - nfs_code-server_attach_website:/website
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.code-server.rule=Host(`code.${DOMAIN_SWARM}`)"
        - "traefik.http.routers.code-server.entrypoints=websecure"
        - "traefik.http.routers.code-server.service=code-server"
        - "traefik.http.routers.code-server.middlewares=noauth-chain@file"
        - "traefik.http.services.code-server.loadbalancer.server.port=8443"
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.type == vm
          - node.labels.development == true

  notebook:
    image: jupyter/all-spark-notebook
    networks: [network_cluster]
    restart: on-failure
    environment:
      PUID: 1000
      PGID: 1000    
      CHOWN_HOME: 'yes'
      CHOWN_EXTRA_OPTS: '-R'
      TZ: ${TZ} 
    volumes:
      - nfs_notebook:/home/jovyan
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.notebook.rule=Host(`notebook.${DOMAIN_SWARM}`)"
        - "traefik.http.routers.notebook.entrypoints=websecure"
        - "traefik.http.routers.notebook.service=notebook"
        - "traefik.http.routers.notebook.middlewares=noauth-chain@file"
        - "traefik.http.services.notebook.loadbalancer.server.port=8888"
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.type == vm
          - node.labels.development == true

  pageplug:
    image: cloudtogouser/pageplug-ce:v1.8.15
    networks: [network_cluster]
    restart: on-failure    
    environment:
      TZ: ${TZ} 
    volumes:
      - nfs_pageplug_stacks:/appsmith-stacks    
    ports:
      - "80:80"
      - "443:443"
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.pageplug.rule=Host(`pageplug.${DOMAIN_SWARM}`)"
        - "traefik.http.routers.pageplug.entrypoints=websecure"
        - "traefik.http.routers.pageplug.service=pageplug"
        - "traefik.http.routers.pageplug.middlewares=noauth-chain@file"
        - "traefik.http.services.pageplug.loadbalancer.server.port=443"
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.type == vm
          - node.labels.development == true

networks:
  network_cluster:
    external: true

x-common-keys-volume: &common-keys-volume
  type: nfs
  o: addr=${NFS_SERVER},rw,nfsvers=4

volumes:
  # NFS
  nfs_gogs_data:
    driver: local
    driver_opts:
      <<: *common-keys-volume
      device: :${NFS_DEVICE}/development/gogs/data
  nfs_gogs_conf:
    driver: local
    driver_opts:
      <<: *common-keys-volume
      device: :${NFS_DEVICE}/development/gogs/conf
  nfs_gitea:
    driver: local
    driver_opts:
      <<: *common-keys-volume
      device: :${NFS_DEVICE}/development/gitea/data
  nfs_code-server_data:
    driver: local
    driver_opts:
      <<: *common-keys-volume
      device: :${NFS_DEVICE}/development/code-server
#   nfs_code-server_attach_base:
#     driver: local
#     driver_opts:
#       <<: *common-keys-volume
#       device: :${NFS_DEVICE}/base
#   nfs_code-server_attach_public:
#     driver: local
#     driver_opts:
#       <<: *common-keys-volume
#       device: :${NFS_DEVICE}/public
  nfs_code-server_attach_swarm:
    driver: local
    driver_opts:
      <<: *common-keys-volume
      device: :${NFS_DEVICE}
#  nfs_code-server_attach_website:
#    driver: local
#    driver_opts:
#      <<: *common-keys-volume
#      device: :/volume1/web/home
  nfs_notebook:
    driver: local
    driver_opts:
      <<: *common-keys-volume
      device: :${NFS_DEVICE}/development/notebook
  nfs_pageplug_stacks:
    driver: local
    driver_opts:
      <<: *common-keys-volume
      device: :${NFS_DEVICE}/development/pageplug/stacks